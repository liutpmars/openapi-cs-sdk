// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AssetData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TigerOpenAPI.Quote.Pb {

  /// <summary>Holder for reflection information generated from AssetData.proto</summary>
  public static partial class AssetDataReflection {

    #region Descriptor
    /// <summary>File descriptor for AssetData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AssetDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9Bc3NldERhdGEucHJvdG8SNGNvbS50aWdlcmJyb2tlcnMuc3RvY2sub3Bl",
            "bmFwaS5jbGllbnQuc29ja2V0LmRhdGEucGIiqAIKCUFzc2V0RGF0YRIPCgdh",
            "Y2NvdW50GAEgASgJEhAKCGN1cnJlbmN5GAIgASgJEg8KB3NlZ1R5cGUYAyAB",
            "KAkSFgoOYXZhaWxhYmxlRnVuZHMYBCABKAESFwoPZXhjZXNzTGlxdWlkaXR5",
            "GAUgASgBEhYKDm5ldExpcXVpZGF0aW9uGAYgASgBEhYKDmVxdWl0eVdpdGhM",
            "b2FuGAcgASgBEhMKC2J1eWluZ1Bvd2VyGAggASgBEhMKC2Nhc2hCYWxhbmNl",
            "GAkgASgBEhoKEmdyb3NzUG9zaXRpb25WYWx1ZRgKIAEoARIVCg1pbml0TWFy",
            "Z2luUmVxGAsgASgBEhYKDm1haW50TWFyZ2luUmVxGAwgASgBEhEKCXRpbWVz",
            "dGFtcBgNIAEoBEIYqgIVVGlnZXJPcGVuQVBJLlF1b3RlLlBiYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TigerOpenAPI.Quote.Pb.AssetData), global::TigerOpenAPI.Quote.Pb.AssetData.Parser, new[]{ "Account", "Currency", "SegType", "AvailableFunds", "ExcessLiquidity", "NetLiquidation", "EquityWithLoan", "BuyingPower", "CashBalance", "GrossPositionValue", "InitMarginReq", "MaintMarginReq", "Timestamp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AssetData : pb::IMessage<AssetData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetData> _parser = new pb::MessageParser<AssetData>(() => new AssetData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TigerOpenAPI.Quote.Pb.AssetDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetData(AssetData other) : this() {
      account_ = other.account_;
      currency_ = other.currency_;
      segType_ = other.segType_;
      availableFunds_ = other.availableFunds_;
      excessLiquidity_ = other.excessLiquidity_;
      netLiquidation_ = other.netLiquidation_;
      equityWithLoan_ = other.equityWithLoan_;
      buyingPower_ = other.buyingPower_;
      cashBalance_ = other.cashBalance_;
      grossPositionValue_ = other.grossPositionValue_;
      initMarginReq_ = other.initMarginReq_;
      maintMarginReq_ = other.maintMarginReq_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetData Clone() {
      return new AssetData(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// user account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 2;
    private string currency_ = "";
    /// <summary>
    /// currency. USD, HKD, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "segType" field.</summary>
    public const int SegTypeFieldNumber = 3;
    private string segType_ = "";
    /// <summary>
    /// Securities Category C: (Commodities Futures), S: (Securities Stocks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SegType {
      get { return segType_; }
      set {
        segType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "availableFunds" field.</summary>
    public const int AvailableFundsFieldNumber = 4;
    private double availableFunds_;
    /// <summary>
    /// available funds, overnight liquidity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvailableFunds {
      get { return availableFunds_; }
      set {
        availableFunds_ = value;
      }
    }

    /// <summary>Field number for the "excessLiquidity" field.</summary>
    public const int ExcessLiquidityFieldNumber = 5;
    private double excessLiquidity_;
    /// <summary>
    /// excess liquidity, used to represent intraday risk value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ExcessLiquidity {
      get { return excessLiquidity_; }
      set {
        excessLiquidity_ = value;
      }
    }

    /// <summary>Field number for the "netLiquidation" field.</summary>
    public const int NetLiquidationFieldNumber = 6;
    private double netLiquidation_;
    /// <summary>
    /// Total Assets (Net Liquidation Value)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NetLiquidation {
      get { return netLiquidation_; }
      set {
        netLiquidation_ = value;
      }
    }

    /// <summary>Field number for the "equityWithLoan" field.</summary>
    public const int EquityWithLoanFieldNumber = 7;
    private double equityWithLoan_;
    /// <summary>
    /// Equity with loan value (asset with loan value) - Securities Segment: Cash Value + Stock Value - Futures Segment: Cash Value - Maintenance Margin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EquityWithLoan {
      get { return equityWithLoan_; }
      set {
        equityWithLoan_ = value;
      }
    }

    /// <summary>Field number for the "buyingPower" field.</summary>
    public const int BuyingPowerFieldNumber = 8;
    private double buyingPower_;
    /// <summary>
    /// buying power. An estimation of how many more dollars you can buy in stock assets. Only apply to stock segment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BuyingPower {
      get { return buyingPower_; }
      set {
        buyingPower_ = value;
      }
    }

    /// <summary>Field number for the "cashBalance" field.</summary>
    public const int CashBalanceFieldNumber = 9;
    private double cashBalance_;
    /// <summary>
    /// Cash amount. Sum of current cash balances in all currencies
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double CashBalance {
      get { return cashBalance_; }
      set {
        cashBalance_ = value;
      }
    }

    /// <summary>Field number for the "grossPositionValue" field.</summary>
    public const int GrossPositionValueFieldNumber = 10;
    private double grossPositionValue_;
    /// <summary>
    /// total value of securities
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GrossPositionValue {
      get { return grossPositionValue_; }
      set {
        grossPositionValue_ = value;
      }
    }

    /// <summary>Field number for the "initMarginReq" field.</summary>
    public const int InitMarginReqFieldNumber = 11;
    private double initMarginReq_;
    /// <summary>
    /// initial margin requirement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double InitMarginReq {
      get { return initMarginReq_; }
      set {
        initMarginReq_ = value;
      }
    }

    /// <summary>Field number for the "maintMarginReq" field.</summary>
    public const int MaintMarginReqFieldNumber = 12;
    private double maintMarginReq_;
    /// <summary>
    /// maintenance margin requirement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaintMarginReq {
      get { return maintMarginReq_; }
      set {
        maintMarginReq_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 13;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Currency != other.Currency) return false;
      if (SegType != other.SegType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvailableFunds, other.AvailableFunds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExcessLiquidity, other.ExcessLiquidity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NetLiquidation, other.NetLiquidation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EquityWithLoan, other.EquityWithLoan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BuyingPower, other.BuyingPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CashBalance, other.CashBalance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GrossPositionValue, other.GrossPositionValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitMarginReq, other.InitMarginReq)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaintMarginReq, other.MaintMarginReq)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (SegType.Length != 0) hash ^= SegType.GetHashCode();
      if (AvailableFunds != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvailableFunds);
      if (ExcessLiquidity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExcessLiquidity);
      if (NetLiquidation != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NetLiquidation);
      if (EquityWithLoan != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EquityWithLoan);
      if (BuyingPower != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BuyingPower);
      if (CashBalance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CashBalance);
      if (GrossPositionValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GrossPositionValue);
      if (InitMarginReq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitMarginReq);
      if (MaintMarginReq != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaintMarginReq);
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currency);
      }
      if (SegType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SegType);
      }
      if (AvailableFunds != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AvailableFunds);
      }
      if (ExcessLiquidity != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ExcessLiquidity);
      }
      if (NetLiquidation != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(NetLiquidation);
      }
      if (EquityWithLoan != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(EquityWithLoan);
      }
      if (BuyingPower != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(BuyingPower);
      }
      if (CashBalance != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CashBalance);
      }
      if (GrossPositionValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(GrossPositionValue);
      }
      if (InitMarginReq != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(InitMarginReq);
      }
      if (MaintMarginReq != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(MaintMarginReq);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currency);
      }
      if (SegType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SegType);
      }
      if (AvailableFunds != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AvailableFunds);
      }
      if (ExcessLiquidity != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(ExcessLiquidity);
      }
      if (NetLiquidation != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(NetLiquidation);
      }
      if (EquityWithLoan != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(EquityWithLoan);
      }
      if (BuyingPower != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(BuyingPower);
      }
      if (CashBalance != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(CashBalance);
      }
      if (GrossPositionValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(GrossPositionValue);
      }
      if (InitMarginReq != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(InitMarginReq);
      }
      if (MaintMarginReq != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(MaintMarginReq);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (SegType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SegType);
      }
      if (AvailableFunds != 0D) {
        size += 1 + 8;
      }
      if (ExcessLiquidity != 0D) {
        size += 1 + 8;
      }
      if (NetLiquidation != 0D) {
        size += 1 + 8;
      }
      if (EquityWithLoan != 0D) {
        size += 1 + 8;
      }
      if (BuyingPower != 0D) {
        size += 1 + 8;
      }
      if (CashBalance != 0D) {
        size += 1 + 8;
      }
      if (GrossPositionValue != 0D) {
        size += 1 + 8;
      }
      if (InitMarginReq != 0D) {
        size += 1 + 8;
      }
      if (MaintMarginReq != 0D) {
        size += 1 + 8;
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetData other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.SegType.Length != 0) {
        SegType = other.SegType;
      }
      if (other.AvailableFunds != 0D) {
        AvailableFunds = other.AvailableFunds;
      }
      if (other.ExcessLiquidity != 0D) {
        ExcessLiquidity = other.ExcessLiquidity;
      }
      if (other.NetLiquidation != 0D) {
        NetLiquidation = other.NetLiquidation;
      }
      if (other.EquityWithLoan != 0D) {
        EquityWithLoan = other.EquityWithLoan;
      }
      if (other.BuyingPower != 0D) {
        BuyingPower = other.BuyingPower;
      }
      if (other.CashBalance != 0D) {
        CashBalance = other.CashBalance;
      }
      if (other.GrossPositionValue != 0D) {
        GrossPositionValue = other.GrossPositionValue;
      }
      if (other.InitMarginReq != 0D) {
        InitMarginReq = other.InitMarginReq;
      }
      if (other.MaintMarginReq != 0D) {
        MaintMarginReq = other.MaintMarginReq;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Currency = input.ReadString();
            break;
          }
          case 26: {
            SegType = input.ReadString();
            break;
          }
          case 33: {
            AvailableFunds = input.ReadDouble();
            break;
          }
          case 41: {
            ExcessLiquidity = input.ReadDouble();
            break;
          }
          case 49: {
            NetLiquidation = input.ReadDouble();
            break;
          }
          case 57: {
            EquityWithLoan = input.ReadDouble();
            break;
          }
          case 65: {
            BuyingPower = input.ReadDouble();
            break;
          }
          case 73: {
            CashBalance = input.ReadDouble();
            break;
          }
          case 81: {
            GrossPositionValue = input.ReadDouble();
            break;
          }
          case 89: {
            InitMarginReq = input.ReadDouble();
            break;
          }
          case 97: {
            MaintMarginReq = input.ReadDouble();
            break;
          }
          case 104: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Currency = input.ReadString();
            break;
          }
          case 26: {
            SegType = input.ReadString();
            break;
          }
          case 33: {
            AvailableFunds = input.ReadDouble();
            break;
          }
          case 41: {
            ExcessLiquidity = input.ReadDouble();
            break;
          }
          case 49: {
            NetLiquidation = input.ReadDouble();
            break;
          }
          case 57: {
            EquityWithLoan = input.ReadDouble();
            break;
          }
          case 65: {
            BuyingPower = input.ReadDouble();
            break;
          }
          case 73: {
            CashBalance = input.ReadDouble();
            break;
          }
          case 81: {
            GrossPositionValue = input.ReadDouble();
            break;
          }
          case 89: {
            InitMarginReq = input.ReadDouble();
            break;
          }
          case 97: {
            MaintMarginReq = input.ReadDouble();
            break;
          }
          case 104: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
