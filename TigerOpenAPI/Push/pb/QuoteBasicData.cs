// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: QuoteBasicData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TigerOpenAPI.Quote.Pb {

  /// <summary>Holder for reflection information generated from QuoteBasicData.proto</summary>
  public static partial class QuoteBasicDataReflection {

    #region Descriptor
    /// <summary>File descriptor for QuoteBasicData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuoteBasicDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRRdW90ZUJhc2ljRGF0YS5wcm90bxI0Y29tLnRpZ2VyYnJva2Vycy5zdG9j",
            "ay5vcGVuYXBpLmNsaWVudC5zb2NrZXQuZGF0YS5wYhoSU29ja2V0Q29tbW9u",
            "LnByb3RvGg9RdW90ZURhdGEucHJvdG8ipQcKDlF1b3RlQmFzaWNEYXRhEg4K",
            "BnN5bWJvbBgBIAEoCRJaCgR0eXBlGAIgASgOMkwuY29tLnRpZ2VyYnJva2Vy",
            "cy5zdG9jay5vcGVuYXBpLmNsaWVudC5zb2NrZXQuZGF0YS5wYi5Tb2NrZXRD",
            "b21tb24uUXVvdGVUeXBlEhEKCXRpbWVzdGFtcBgDIAEoBBIcCg9zZXJ2ZXJU",
            "aW1lc3RhbXAYBCABKARIAIgBARIVCghhdmdQcmljZRgFIAEoAUgBiAEBEhgK",
            "C2xhdGVzdFByaWNlGAYgASgBSAKIAQESIQoUbGF0ZXN0UHJpY2VUaW1lc3Rh",
            "bXAYByABKARIA4gBARIXCgpsYXRlc3RUaW1lGAggASgJSASIAQESFQoIcHJl",
            "Q2xvc2UYCSABKAFIBYgBARITCgZ2b2x1bWUYCiABKBJIBogBARITCgZhbW91",
            "bnQYCyABKAFIB4gBARIRCgRvcGVuGAwgASgBSAiIAQESEQoEaGlnaBgNIAEo",
            "AUgJiAEBEhAKA2xvdxgOIAEoAUgKiAEBEhsKDmhvdXJUcmFkaW5nVGFnGA8g",
            "ASgJSAuIAQESGQoMbWFya2V0U3RhdHVzGBAgASgJSAyIAQESFwoKaWRlbnRp",
            "ZmllchgXIAEoCUgNiAEBEhQKB29wZW5JbnQYGCABKBJIDogBARIWCgl0cmFk",
            "ZVRpbWUYGSABKARID4gBARIaCg1wcmVTZXR0bGVtZW50GBogASgBSBCIAQES",
            "FAoHbWluVGljaxgbIAEoAkgRiAEBElcKAm1pGBwgASgLMkYuY29tLnRpZ2Vy",
            "YnJva2Vycy5zdG9jay5vcGVuYXBpLmNsaWVudC5zb2NrZXQuZGF0YS5wYi5R",
            "dW90ZURhdGEuTWludXRlSBKIAQFCEgoQX3NlcnZlclRpbWVzdGFtcEILCglf",
            "YXZnUHJpY2VCDgoMX2xhdGVzdFByaWNlQhcKFV9sYXRlc3RQcmljZVRpbWVz",
            "dGFtcEINCgtfbGF0ZXN0VGltZUILCglfcHJlQ2xvc2VCCQoHX3ZvbHVtZUIJ",
            "CgdfYW1vdW50QgcKBV9vcGVuQgcKBV9oaWdoQgYKBF9sb3dCEQoPX2hvdXJU",
            "cmFkaW5nVGFnQg8KDV9tYXJrZXRTdGF0dXNCDQoLX2lkZW50aWZpZXJCCgoI",
            "X29wZW5JbnRCDAoKX3RyYWRlVGltZUIQCg5fcHJlU2V0dGxlbWVudEIKCghf",
            "bWluVGlja0IFCgNfbWlCGKoCFVRpZ2VyT3BlbkFQSS5RdW90ZS5QYlAAUAFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::TigerOpenAPI.Quote.Pb.SocketCommonReflection.Descriptor, global::TigerOpenAPI.Quote.Pb.QuoteDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TigerOpenAPI.Quote.Pb.QuoteBasicData), global::TigerOpenAPI.Quote.Pb.QuoteBasicData.Parser, new[]{ "Symbol", "Type", "Timestamp", "ServerTimestamp", "AvgPrice", "LatestPrice", "LatestPriceTimestamp", "LatestTime", "PreClose", "Volume", "Amount", "Open", "High", "Low", "HourTradingTag", "MarketStatus", "Identifier", "OpenInt", "TradeTime", "PreSettlement", "MinTick", "Mi" }, new[]{ "ServerTimestamp", "AvgPrice", "LatestPrice", "LatestPriceTimestamp", "LatestTime", "PreClose", "Volume", "Amount", "Open", "High", "Low", "HourTradingTag", "MarketStatus", "Identifier", "OpenInt", "TradeTime", "PreSettlement", "MinTick", "Mi" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QuoteBasicData : pb::IMessage<QuoteBasicData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QuoteBasicData> _parser = new pb::MessageParser<QuoteBasicData>(() => new QuoteBasicData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QuoteBasicData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TigerOpenAPI.Quote.Pb.QuoteBasicDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuoteBasicData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuoteBasicData(QuoteBasicData other) : this() {
      _hasBits0 = other._hasBits0;
      symbol_ = other.symbol_;
      type_ = other.type_;
      timestamp_ = other.timestamp_;
      serverTimestamp_ = other.serverTimestamp_;
      avgPrice_ = other.avgPrice_;
      latestPrice_ = other.latestPrice_;
      latestPriceTimestamp_ = other.latestPriceTimestamp_;
      latestTime_ = other.latestTime_;
      preClose_ = other.preClose_;
      volume_ = other.volume_;
      amount_ = other.amount_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      hourTradingTag_ = other.hourTradingTag_;
      marketStatus_ = other.marketStatus_;
      identifier_ = other.identifier_;
      openInt_ = other.openInt_;
      tradeTime_ = other.tradeTime_;
      preSettlement_ = other.preSettlement_;
      minTick_ = other.minTick_;
      mi_ = other.mi_ != null ? other.mi_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuoteBasicData Clone() {
      return new QuoteBasicData(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType type_ = global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType.None;
    /// <summary>
    /// BASIC/BBO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "serverTimestamp" field.</summary>
    public const int ServerTimestampFieldNumber = 4;
    private ulong serverTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ServerTimestamp {
      get { if ((_hasBits0 & 1) != 0) { return serverTimestamp_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        serverTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "serverTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasServerTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "serverTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearServerTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "avgPrice" field.</summary>
    public const int AvgPriceFieldNumber = 5;
    private double avgPrice_;
    /// <summary>
    /// Options data not support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgPrice {
      get { if ((_hasBits0 & 2) != 0) { return avgPrice_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        avgPrice_ = value;
      }
    }
    /// <summary>Gets whether the "avgPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAvgPrice {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "avgPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAvgPrice() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "latestPrice" field.</summary>
    public const int LatestPriceFieldNumber = 6;
    private double latestPrice_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LatestPrice {
      get { if ((_hasBits0 & 4) != 0) { return latestPrice_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        latestPrice_ = value;
      }
    }
    /// <summary>Gets whether the "latestPrice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLatestPrice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "latestPrice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLatestPrice() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "latestPriceTimestamp" field.</summary>
    public const int LatestPriceTimestampFieldNumber = 7;
    private ulong latestPriceTimestamp_;
    /// <summary>
    /// Pre/Post-Mkt data not support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong LatestPriceTimestamp {
      get { if ((_hasBits0 & 8) != 0) { return latestPriceTimestamp_; } else { return 0UL; } }
      set {
        _hasBits0 |= 8;
        latestPriceTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "latestPriceTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLatestPriceTimestamp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "latestPriceTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLatestPriceTimestamp() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "latestTime" field.</summary>
    public const int LatestTimeFieldNumber = 8;
    private string latestTime_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LatestTime {
      get { return latestTime_ ?? ""; }
      set {
        latestTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "latestTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLatestTime {
      get { return latestTime_ != null; }
    }
    /// <summary>Clears the value of the "latestTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLatestTime() {
      latestTime_ = null;
    }

    /// <summary>Field number for the "preClose" field.</summary>
    public const int PreCloseFieldNumber = 9;
    private double preClose_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PreClose {
      get { if ((_hasBits0 & 16) != 0) { return preClose_; } else { return 0D; } }
      set {
        _hasBits0 |= 16;
        preClose_ = value;
      }
    }
    /// <summary>Gets whether the "preClose" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreClose {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "preClose" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreClose() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 10;
    private long volume_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Volume {
      get { if ((_hasBits0 & 32) != 0) { return volume_; } else { return 0L; } }
      set {
        _hasBits0 |= 32;
        volume_ = value;
      }
    }
    /// <summary>Gets whether the "volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolume {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolume() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 11;
    private double amount_;
    /// <summary>
    /// Futures and Options data not support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Amount {
      get { if ((_hasBits0 & 64) != 0) { return amount_; } else { return 0D; } }
      set {
        _hasBits0 |= 64;
        amount_ = value;
      }
    }
    /// <summary>Gets whether the "amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAmount {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAmount() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 12;
    private double open_;
    /// <summary>
    /// Pre/Post-Mkt data not support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Open {
      get { if ((_hasBits0 & 128) != 0) { return open_; } else { return 0D; } }
      set {
        _hasBits0 |= 128;
        open_ = value;
      }
    }
    /// <summary>Gets whether the "open" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpen {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "open" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpen() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 13;
    private double high_;
    /// <summary>
    /// Pre/Post-Mkt data not support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double High {
      get { if ((_hasBits0 & 256) != 0) { return high_; } else { return 0D; } }
      set {
        _hasBits0 |= 256;
        high_ = value;
      }
    }
    /// <summary>Gets whether the "high" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHigh {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "high" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHigh() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 14;
    private double low_;
    /// <summary>
    /// Pre/Post-Mkt data not support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Low {
      get { if ((_hasBits0 & 512) != 0) { return low_; } else { return 0D; } }
      set {
        _hasBits0 |= 512;
        low_ = value;
      }
    }
    /// <summary>Gets whether the "low" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLow {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "low" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLow() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "hourTradingTag" field.</summary>
    public const int HourTradingTagFieldNumber = 15;
    private string hourTradingTag_;
    /// <summary>
    /// Pre/Post-Mkt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HourTradingTag {
      get { return hourTradingTag_ ?? ""; }
      set {
        hourTradingTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hourTradingTag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHourTradingTag {
      get { return hourTradingTag_ != null; }
    }
    /// <summary>Clears the value of the "hourTradingTag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHourTradingTag() {
      hourTradingTag_ = null;
    }

    /// <summary>Field number for the "marketStatus" field.</summary>
    public const int MarketStatusFieldNumber = 16;
    private string marketStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MarketStatus {
      get { return marketStatus_ ?? ""; }
      set {
        marketStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "marketStatus" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMarketStatus {
      get { return marketStatus_ != null; }
    }
    /// <summary>Clears the value of the "marketStatus" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMarketStatus() {
      marketStatus_ = null;
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 23;
    private string identifier_;
    /// <summary>
    /// only Options support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Identifier {
      get { return identifier_ ?? ""; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "identifier" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIdentifier {
      get { return identifier_ != null; }
    }
    /// <summary>Clears the value of the "identifier" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIdentifier() {
      identifier_ = null;
    }

    /// <summary>Field number for the "openInt" field.</summary>
    public const int OpenIntFieldNumber = 24;
    private long openInt_;
    /// <summary>
    /// open interest, only Options support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OpenInt {
      get { if ((_hasBits0 & 1024) != 0) { return openInt_; } else { return 0L; } }
      set {
        _hasBits0 |= 1024;
        openInt_ = value;
      }
    }
    /// <summary>Gets whether the "openInt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpenInt {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "openInt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpenInt() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "tradeTime" field.</summary>
    public const int TradeTimeFieldNumber = 25;
    private ulong tradeTime_;
    /// <summary>
    /// latest trad time, only Futures support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TradeTime {
      get { if ((_hasBits0 & 2048) != 0) { return tradeTime_; } else { return 0UL; } }
      set {
        _hasBits0 |= 2048;
        tradeTime_ = value;
      }
    }
    /// <summary>Gets whether the "tradeTime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTradeTime {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "tradeTime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTradeTime() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "preSettlement" field.</summary>
    public const int PreSettlementFieldNumber = 26;
    private double preSettlement_;
    /// <summary>
    /// previous settlement price, only Futures support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PreSettlement {
      get { if ((_hasBits0 & 4096) != 0) { return preSettlement_; } else { return 0D; } }
      set {
        _hasBits0 |= 4096;
        preSettlement_ = value;
      }
    }
    /// <summary>Gets whether the "preSettlement" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPreSettlement {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "preSettlement" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPreSettlement() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "minTick" field.</summary>
    public const int MinTickFieldNumber = 27;
    private float minTick_;
    /// <summary>
    /// min tick, only Futures support
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinTick {
      get { if ((_hasBits0 & 8192) != 0) { return minTick_; } else { return 0F; } }
      set {
        _hasBits0 |= 8192;
        minTick_ = value;
      }
    }
    /// <summary>Gets whether the "minTick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinTick {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "minTick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinTick() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "mi" field.</summary>
    public const int MiFieldNumber = 28;
    private global::TigerOpenAPI.Quote.Pb.QuoteData.Types.Minute mi_;
    /// <summary>
    /// minute data: price, average price, time, volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::TigerOpenAPI.Quote.Pb.QuoteData.Types.Minute Mi {
      get { return mi_; }
      set {
        mi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QuoteBasicData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QuoteBasicData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Type != other.Type) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ServerTimestamp != other.ServerTimestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgPrice, other.AvgPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LatestPrice, other.LatestPrice)) return false;
      if (LatestPriceTimestamp != other.LatestPriceTimestamp) return false;
      if (LatestTime != other.LatestTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PreClose, other.PreClose)) return false;
      if (Volume != other.Volume) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Open, other.Open)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(High, other.High)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Low, other.Low)) return false;
      if (HourTradingTag != other.HourTradingTag) return false;
      if (MarketStatus != other.MarketStatus) return false;
      if (Identifier != other.Identifier) return false;
      if (OpenInt != other.OpenInt) return false;
      if (TradeTime != other.TradeTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PreSettlement, other.PreSettlement)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinTick, other.MinTick)) return false;
      if (!object.Equals(Mi, other.Mi)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Type != global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType.None) hash ^= Type.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (HasServerTimestamp) hash ^= ServerTimestamp.GetHashCode();
      if (HasAvgPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgPrice);
      if (HasLatestPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LatestPrice);
      if (HasLatestPriceTimestamp) hash ^= LatestPriceTimestamp.GetHashCode();
      if (HasLatestTime) hash ^= LatestTime.GetHashCode();
      if (HasPreClose) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PreClose);
      if (HasVolume) hash ^= Volume.GetHashCode();
      if (HasAmount) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
      if (HasOpen) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Open);
      if (HasHigh) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(High);
      if (HasLow) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Low);
      if (HasHourTradingTag) hash ^= HourTradingTag.GetHashCode();
      if (HasMarketStatus) hash ^= MarketStatus.GetHashCode();
      if (HasIdentifier) hash ^= Identifier.GetHashCode();
      if (HasOpenInt) hash ^= OpenInt.GetHashCode();
      if (HasTradeTime) hash ^= TradeTime.GetHashCode();
      if (HasPreSettlement) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PreSettlement);
      if (HasMinTick) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinTick);
      if (mi_ != null) hash ^= Mi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Type != global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timestamp);
      }
      if (HasServerTimestamp) {
        output.WriteRawTag(32);
        output.WriteUInt64(ServerTimestamp);
      }
      if (HasAvgPrice) {
        output.WriteRawTag(41);
        output.WriteDouble(AvgPrice);
      }
      if (HasLatestPrice) {
        output.WriteRawTag(49);
        output.WriteDouble(LatestPrice);
      }
      if (HasLatestPriceTimestamp) {
        output.WriteRawTag(56);
        output.WriteUInt64(LatestPriceTimestamp);
      }
      if (HasLatestTime) {
        output.WriteRawTag(66);
        output.WriteString(LatestTime);
      }
      if (HasPreClose) {
        output.WriteRawTag(73);
        output.WriteDouble(PreClose);
      }
      if (HasVolume) {
        output.WriteRawTag(80);
        output.WriteSInt64(Volume);
      }
      if (HasAmount) {
        output.WriteRawTag(89);
        output.WriteDouble(Amount);
      }
      if (HasOpen) {
        output.WriteRawTag(97);
        output.WriteDouble(Open);
      }
      if (HasHigh) {
        output.WriteRawTag(105);
        output.WriteDouble(High);
      }
      if (HasLow) {
        output.WriteRawTag(113);
        output.WriteDouble(Low);
      }
      if (HasHourTradingTag) {
        output.WriteRawTag(122);
        output.WriteString(HourTradingTag);
      }
      if (HasMarketStatus) {
        output.WriteRawTag(130, 1);
        output.WriteString(MarketStatus);
      }
      if (HasIdentifier) {
        output.WriteRawTag(186, 1);
        output.WriteString(Identifier);
      }
      if (HasOpenInt) {
        output.WriteRawTag(192, 1);
        output.WriteSInt64(OpenInt);
      }
      if (HasTradeTime) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(TradeTime);
      }
      if (HasPreSettlement) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(PreSettlement);
      }
      if (HasMinTick) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(MinTick);
      }
      if (mi_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Mi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Type != global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timestamp);
      }
      if (HasServerTimestamp) {
        output.WriteRawTag(32);
        output.WriteUInt64(ServerTimestamp);
      }
      if (HasAvgPrice) {
        output.WriteRawTag(41);
        output.WriteDouble(AvgPrice);
      }
      if (HasLatestPrice) {
        output.WriteRawTag(49);
        output.WriteDouble(LatestPrice);
      }
      if (HasLatestPriceTimestamp) {
        output.WriteRawTag(56);
        output.WriteUInt64(LatestPriceTimestamp);
      }
      if (HasLatestTime) {
        output.WriteRawTag(66);
        output.WriteString(LatestTime);
      }
      if (HasPreClose) {
        output.WriteRawTag(73);
        output.WriteDouble(PreClose);
      }
      if (HasVolume) {
        output.WriteRawTag(80);
        output.WriteSInt64(Volume);
      }
      if (HasAmount) {
        output.WriteRawTag(89);
        output.WriteDouble(Amount);
      }
      if (HasOpen) {
        output.WriteRawTag(97);
        output.WriteDouble(Open);
      }
      if (HasHigh) {
        output.WriteRawTag(105);
        output.WriteDouble(High);
      }
      if (HasLow) {
        output.WriteRawTag(113);
        output.WriteDouble(Low);
      }
      if (HasHourTradingTag) {
        output.WriteRawTag(122);
        output.WriteString(HourTradingTag);
      }
      if (HasMarketStatus) {
        output.WriteRawTag(130, 1);
        output.WriteString(MarketStatus);
      }
      if (HasIdentifier) {
        output.WriteRawTag(186, 1);
        output.WriteString(Identifier);
      }
      if (HasOpenInt) {
        output.WriteRawTag(192, 1);
        output.WriteSInt64(OpenInt);
      }
      if (HasTradeTime) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(TradeTime);
      }
      if (HasPreSettlement) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(PreSettlement);
      }
      if (HasMinTick) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(MinTick);
      }
      if (mi_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Mi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Type != global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (HasServerTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTimestamp);
      }
      if (HasAvgPrice) {
        size += 1 + 8;
      }
      if (HasLatestPrice) {
        size += 1 + 8;
      }
      if (HasLatestPriceTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestPriceTimestamp);
      }
      if (HasLatestTime) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LatestTime);
      }
      if (HasPreClose) {
        size += 1 + 8;
      }
      if (HasVolume) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Volume);
      }
      if (HasAmount) {
        size += 1 + 8;
      }
      if (HasOpen) {
        size += 1 + 8;
      }
      if (HasHigh) {
        size += 1 + 8;
      }
      if (HasLow) {
        size += 1 + 8;
      }
      if (HasHourTradingTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HourTradingTag);
      }
      if (HasMarketStatus) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MarketStatus);
      }
      if (HasIdentifier) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (HasOpenInt) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(OpenInt);
      }
      if (HasTradeTime) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TradeTime);
      }
      if (HasPreSettlement) {
        size += 2 + 8;
      }
      if (HasMinTick) {
        size += 2 + 4;
      }
      if (mi_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Mi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QuoteBasicData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Type != global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType.None) {
        Type = other.Type;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.HasServerTimestamp) {
        ServerTimestamp = other.ServerTimestamp;
      }
      if (other.HasAvgPrice) {
        AvgPrice = other.AvgPrice;
      }
      if (other.HasLatestPrice) {
        LatestPrice = other.LatestPrice;
      }
      if (other.HasLatestPriceTimestamp) {
        LatestPriceTimestamp = other.LatestPriceTimestamp;
      }
      if (other.HasLatestTime) {
        LatestTime = other.LatestTime;
      }
      if (other.HasPreClose) {
        PreClose = other.PreClose;
      }
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      if (other.HasOpen) {
        Open = other.Open;
      }
      if (other.HasHigh) {
        High = other.High;
      }
      if (other.HasLow) {
        Low = other.Low;
      }
      if (other.HasHourTradingTag) {
        HourTradingTag = other.HourTradingTag;
      }
      if (other.HasMarketStatus) {
        MarketStatus = other.MarketStatus;
      }
      if (other.HasIdentifier) {
        Identifier = other.Identifier;
      }
      if (other.HasOpenInt) {
        OpenInt = other.OpenInt;
      }
      if (other.HasTradeTime) {
        TradeTime = other.TradeTime;
      }
      if (other.HasPreSettlement) {
        PreSettlement = other.PreSettlement;
      }
      if (other.HasMinTick) {
        MinTick = other.MinTick;
      }
      if (other.mi_ != null) {
        if (mi_ == null) {
          Mi = new global::TigerOpenAPI.Quote.Pb.QuoteData.Types.Minute();
        }
        Mi.MergeFrom(other.Mi);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType) input.ReadEnum();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 32: {
            ServerTimestamp = input.ReadUInt64();
            break;
          }
          case 41: {
            AvgPrice = input.ReadDouble();
            break;
          }
          case 49: {
            LatestPrice = input.ReadDouble();
            break;
          }
          case 56: {
            LatestPriceTimestamp = input.ReadUInt64();
            break;
          }
          case 66: {
            LatestTime = input.ReadString();
            break;
          }
          case 73: {
            PreClose = input.ReadDouble();
            break;
          }
          case 80: {
            Volume = input.ReadSInt64();
            break;
          }
          case 89: {
            Amount = input.ReadDouble();
            break;
          }
          case 97: {
            Open = input.ReadDouble();
            break;
          }
          case 105: {
            High = input.ReadDouble();
            break;
          }
          case 113: {
            Low = input.ReadDouble();
            break;
          }
          case 122: {
            HourTradingTag = input.ReadString();
            break;
          }
          case 130: {
            MarketStatus = input.ReadString();
            break;
          }
          case 186: {
            Identifier = input.ReadString();
            break;
          }
          case 192: {
            OpenInt = input.ReadSInt64();
            break;
          }
          case 200: {
            TradeTime = input.ReadUInt64();
            break;
          }
          case 209: {
            PreSettlement = input.ReadDouble();
            break;
          }
          case 221: {
            MinTick = input.ReadFloat();
            break;
          }
          case 226: {
            if (mi_ == null) {
              Mi = new global::TigerOpenAPI.Quote.Pb.QuoteData.Types.Minute();
            }
            input.ReadMessage(Mi);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::TigerOpenAPI.Quote.Pb.SocketCommon.Types.QuoteType) input.ReadEnum();
            break;
          }
          case 24: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 32: {
            ServerTimestamp = input.ReadUInt64();
            break;
          }
          case 41: {
            AvgPrice = input.ReadDouble();
            break;
          }
          case 49: {
            LatestPrice = input.ReadDouble();
            break;
          }
          case 56: {
            LatestPriceTimestamp = input.ReadUInt64();
            break;
          }
          case 66: {
            LatestTime = input.ReadString();
            break;
          }
          case 73: {
            PreClose = input.ReadDouble();
            break;
          }
          case 80: {
            Volume = input.ReadSInt64();
            break;
          }
          case 89: {
            Amount = input.ReadDouble();
            break;
          }
          case 97: {
            Open = input.ReadDouble();
            break;
          }
          case 105: {
            High = input.ReadDouble();
            break;
          }
          case 113: {
            Low = input.ReadDouble();
            break;
          }
          case 122: {
            HourTradingTag = input.ReadString();
            break;
          }
          case 130: {
            MarketStatus = input.ReadString();
            break;
          }
          case 186: {
            Identifier = input.ReadString();
            break;
          }
          case 192: {
            OpenInt = input.ReadSInt64();
            break;
          }
          case 200: {
            TradeTime = input.ReadUInt64();
            break;
          }
          case 209: {
            PreSettlement = input.ReadDouble();
            break;
          }
          case 221: {
            MinTick = input.ReadFloat();
            break;
          }
          case 226: {
            if (mi_ == null) {
              Mi = new global::TigerOpenAPI.Quote.Pb.QuoteData.Types.Minute();
            }
            input.ReadMessage(Mi);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
