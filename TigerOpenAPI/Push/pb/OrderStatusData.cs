// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OrderStatusData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TigerOpenAPI.Quote.Pb {

  /// <summary>Holder for reflection information generated from OrderStatusData.proto</summary>
  public static partial class OrderStatusDataReflection {

    #region Descriptor
    /// <summary>File descriptor for OrderStatusData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrderStatusDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVPcmRlclN0YXR1c0RhdGEucHJvdG8SNGNvbS50aWdlcmJyb2tlcnMuc3Rv",
            "Y2sub3BlbmFwaS5jbGllbnQuc29ja2V0LmRhdGEucGIi6gQKD09yZGVyU3Rh",
            "dHVzRGF0YRIKCgJpZBgBIAEoEhIPCgdhY2NvdW50GAIgASgJEg4KBnN5bWJv",
            "bBgDIAEoCRISCgppZGVudGlmaWVyGAQgASgJEhIKCm11bHRpcGxpZXIYBSAB",
            "KA0SDgoGYWN0aW9uGAYgASgJEg4KBm1hcmtldBgHIAEoCRIQCghjdXJyZW5j",
            "eRgIIAEoCRIPCgdzZWdUeXBlGAkgASgJEg8KB3NlY1R5cGUYCiABKAkSEQoJ",
            "b3JkZXJUeXBlGAsgASgJEg4KBmlzTG9uZxgMIAEoCBIVCg10b3RhbFF1YW50",
            "aXR5GA0gASgSEhoKEnRvdGFsUXVhbnRpdHlTY2FsZRgOIAEoERIWCg5maWxs",
            "ZWRRdWFudGl0eRgPIAEoEhIbChNmaWxsZWRRdWFudGl0eVNjYWxlGBAgASgR",
            "EhQKDGF2Z0ZpbGxQcmljZRgRIAEoARISCgpsaW1pdFByaWNlGBIgASgBEhMK",
            "C3JlYWxpemVkUG5sGBMgASgBEg4KBnN0YXR1cxgUIAEoCRIVCg1yZXBsYWNl",
            "U3RhdHVzGBUgASgJEhQKDGNhbmNlbFN0YXR1cxgWIAEoCRISCgpvdXRzaWRl",
            "UnRoGBcgASgIEhEKCWNhbk1vZGlmeRgYIAEoCBIRCgljYW5DYW5jZWwYGSAB",
            "KAgSDAoEbmFtZRgaIAEoCRIOCgZzb3VyY2UYGyABKAkSEAoIZXJyb3JNc2cY",
            "HCABKAkSGAoQY29tbWlzc2lvbkFuZEZlZRgdIAEoAhIQCghvcGVuVGltZRge",
            "IAEoBBIRCgl0aW1lc3RhbXAYHyABKARCGKoCFVRpZ2VyT3BlbkFQSS5RdW90",
            "ZS5QYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TigerOpenAPI.Quote.Pb.OrderStatusData), global::TigerOpenAPI.Quote.Pb.OrderStatusData.Parser, new[]{ "Id", "Account", "Symbol", "Identifier", "Multiplier", "Action", "Market", "Currency", "SegType", "SecType", "OrderType", "IsLong", "TotalQuantity", "TotalQuantityScale", "FilledQuantity", "FilledQuantityScale", "AvgFillPrice", "LimitPrice", "RealizedPnl", "Status", "ReplaceStatus", "CancelStatus", "OutsideRth", "CanModify", "CanCancel", "Name", "Source", "ErrorMsg", "CommissionAndFee", "OpenTime", "Timestamp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OrderStatusData : pb::IMessage<OrderStatusData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderStatusData> _parser = new pb::MessageParser<OrderStatusData>(() => new OrderStatusData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OrderStatusData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TigerOpenAPI.Quote.Pb.OrderStatusDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusData(OrderStatusData other) : this() {
      id_ = other.id_;
      account_ = other.account_;
      symbol_ = other.symbol_;
      identifier_ = other.identifier_;
      multiplier_ = other.multiplier_;
      action_ = other.action_;
      market_ = other.market_;
      currency_ = other.currency_;
      segType_ = other.segType_;
      secType_ = other.secType_;
      orderType_ = other.orderType_;
      isLong_ = other.isLong_;
      totalQuantity_ = other.totalQuantity_;
      totalQuantityScale_ = other.totalQuantityScale_;
      filledQuantity_ = other.filledQuantity_;
      filledQuantityScale_ = other.filledQuantityScale_;
      avgFillPrice_ = other.avgFillPrice_;
      limitPrice_ = other.limitPrice_;
      realizedPnl_ = other.realizedPnl_;
      status_ = other.status_;
      replaceStatus_ = other.replaceStatus_;
      cancelStatus_ = other.cancelStatus_;
      outsideRth_ = other.outsideRth_;
      canModify_ = other.canModify_;
      canCancel_ = other.canCancel_;
      name_ = other.name_;
      source_ = other.source_;
      errorMsg_ = other.errorMsg_;
      commissionAndFee_ = other.commissionAndFee_;
      openTime_ = other.openTime_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OrderStatusData Clone() {
      return new OrderStatusData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// unique order id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    /// user account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 4;
    private string identifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "multiplier" field.</summary>
    public const int MultiplierFieldNumber = 5;
    private uint multiplier_;
    /// <summary>
    /// multiplier for futures, options, warrants and CBBC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Multiplier {
      get { return multiplier_; }
      set {
        multiplier_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 6;
    private string action_ = "";
    /// <summary>
    /// BUY or SELL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 7;
    private string market_ = "";
    /// <summary>
    /// market. US, HK, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Market {
      get { return market_; }
      set {
        market_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 8;
    private string currency_ = "";
    /// <summary>
    /// currency. USD, HKD, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "segType" field.</summary>
    public const int SegTypeFieldNumber = 9;
    private string segType_ = "";
    /// <summary>
    /// Securities Category C: (Commodities Futures), S: (Securities Stocks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SegType {
      get { return segType_; }
      set {
        segType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secType" field.</summary>
    public const int SecTypeFieldNumber = 10;
    private string secType_ = "";
    /// <summary>
    /// STK Stocks, OPT Options, WAR Warrants, IOPT CBBC, CASH FOREX, FUT Futures, FOP Future Options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecType {
      get { return secType_; }
      set {
        secType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderType" field.</summary>
    public const int OrderTypeFieldNumber = 11;
    private string orderType_ = "";
    /// <summary>
    /// order type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderType {
      get { return orderType_; }
      set {
        orderType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isLong" field.</summary>
    public const int IsLongFieldNumber = 12;
    private bool isLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLong {
      get { return isLong_; }
      set {
        isLong_ = value;
      }
    }

    /// <summary>Field number for the "totalQuantity" field.</summary>
    public const int TotalQuantityFieldNumber = 13;
    private long totalQuantity_;
    /// <summary>
    /// total quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalQuantity {
      get { return totalQuantity_; }
      set {
        totalQuantity_ = value;
      }
    }

    /// <summary>Field number for the "totalQuantityScale" field.</summary>
    public const int TotalQuantityScaleFieldNumber = 14;
    private int totalQuantityScale_;
    /// <summary>
    /// total quantity scale
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalQuantityScale {
      get { return totalQuantityScale_; }
      set {
        totalQuantityScale_ = value;
      }
    }

    /// <summary>Field number for the "filledQuantity" field.</summary>
    public const int FilledQuantityFieldNumber = 15;
    private long filledQuantity_;
    /// <summary>
    /// filled quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FilledQuantity {
      get { return filledQuantity_; }
      set {
        filledQuantity_ = value;
      }
    }

    /// <summary>Field number for the "filledQuantityScale" field.</summary>
    public const int FilledQuantityScaleFieldNumber = 16;
    private int filledQuantityScale_;
    /// <summary>
    /// filled quantity scale
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FilledQuantityScale {
      get { return filledQuantityScale_; }
      set {
        filledQuantityScale_ = value;
      }
    }

    /// <summary>Field number for the "avgFillPrice" field.</summary>
    public const int AvgFillPriceFieldNumber = 17;
    private double avgFillPrice_;
    /// <summary>
    /// average price at which the orders got filled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice {
      get { return avgFillPrice_; }
      set {
        avgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "limitPrice" field.</summary>
    public const int LimitPriceFieldNumber = 18;
    private double limitPrice_;
    /// <summary>
    /// limit price（required when orderType is 'LMT'）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "realizedPnl" field.</summary>
    public const int RealizedPnlFieldNumber = 19;
    private double realizedPnl_;
    /// <summary>
    /// realized profit and loss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RealizedPnl {
      get { return realizedPnl_; }
      set {
        realizedPnl_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 20;
    private string status_ = "";
    /// <summary>
    /// order status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "replaceStatus" field.</summary>
    public const int ReplaceStatusFieldNumber = 21;
    private string replaceStatus_ = "";
    /// <summary>
    /// order replace status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReplaceStatus {
      get { return replaceStatus_; }
      set {
        replaceStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cancelStatus" field.</summary>
    public const int CancelStatusFieldNumber = 22;
    private string cancelStatus_ = "";
    /// <summary>
    /// order cancel status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CancelStatus {
      get { return cancelStatus_; }
      set {
        cancelStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outsideRth" field.</summary>
    public const int OutsideRthFieldNumber = 23;
    private bool outsideRth_;
    /// <summary>
    /// if trade outside regular trading hours (only applicable to U.S. market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OutsideRth {
      get { return outsideRth_; }
      set {
        outsideRth_ = value;
      }
    }

    /// <summary>Field number for the "canModify" field.</summary>
    public const int CanModifyFieldNumber = 24;
    private bool canModify_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanModify {
      get { return canModify_; }
      set {
        canModify_ = value;
      }
    }

    /// <summary>Field number for the "canCancel" field.</summary>
    public const int CanCancelFieldNumber = 25;
    private bool canCancel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanCancel {
      get { return canCancel_; }
      set {
        canCancel_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 26;
    private string name_ = "";
    /// <summary>
    /// symbol name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 27;
    private string source_ = "";
    /// <summary>
    /// order source(from 'OpenApi', or not)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 28;
    private string errorMsg_ = "";
    /// <summary>
    /// error message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commissionAndFee" field.</summary>
    public const int CommissionAndFeeFieldNumber = 29;
    private float commissionAndFee_;
    /// <summary>
    /// commission and fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CommissionAndFee {
      get { return commissionAndFee_; }
      set {
        commissionAndFee_ = value;
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 30;
    private ulong openTime_;
    /// <summary>
    /// timestamp when the order is placed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 31;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OrderStatusData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OrderStatusData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Account != other.Account) return false;
      if (Symbol != other.Symbol) return false;
      if (Identifier != other.Identifier) return false;
      if (Multiplier != other.Multiplier) return false;
      if (Action != other.Action) return false;
      if (Market != other.Market) return false;
      if (Currency != other.Currency) return false;
      if (SegType != other.SegType) return false;
      if (SecType != other.SecType) return false;
      if (OrderType != other.OrderType) return false;
      if (IsLong != other.IsLong) return false;
      if (TotalQuantity != other.TotalQuantity) return false;
      if (TotalQuantityScale != other.TotalQuantityScale) return false;
      if (FilledQuantity != other.FilledQuantity) return false;
      if (FilledQuantityScale != other.FilledQuantityScale) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice, other.AvgFillPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RealizedPnl, other.RealizedPnl)) return false;
      if (Status != other.Status) return false;
      if (ReplaceStatus != other.ReplaceStatus) return false;
      if (CancelStatus != other.CancelStatus) return false;
      if (OutsideRth != other.OutsideRth) return false;
      if (CanModify != other.CanModify) return false;
      if (CanCancel != other.CanCancel) return false;
      if (Name != other.Name) return false;
      if (Source != other.Source) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CommissionAndFee, other.CommissionAndFee)) return false;
      if (OpenTime != other.OpenTime) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (Multiplier != 0) hash ^= Multiplier.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (Market.Length != 0) hash ^= Market.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (SegType.Length != 0) hash ^= SegType.GetHashCode();
      if (SecType.Length != 0) hash ^= SecType.GetHashCode();
      if (OrderType.Length != 0) hash ^= OrderType.GetHashCode();
      if (IsLong != false) hash ^= IsLong.GetHashCode();
      if (TotalQuantity != 0L) hash ^= TotalQuantity.GetHashCode();
      if (TotalQuantityScale != 0) hash ^= TotalQuantityScale.GetHashCode();
      if (FilledQuantity != 0L) hash ^= FilledQuantity.GetHashCode();
      if (FilledQuantityScale != 0) hash ^= FilledQuantityScale.GetHashCode();
      if (AvgFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice);
      if (LimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
      if (RealizedPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RealizedPnl);
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (ReplaceStatus.Length != 0) hash ^= ReplaceStatus.GetHashCode();
      if (CancelStatus.Length != 0) hash ^= CancelStatus.GetHashCode();
      if (OutsideRth != false) hash ^= OutsideRth.GetHashCode();
      if (CanModify != false) hash ^= CanModify.GetHashCode();
      if (CanCancel != false) hash ^= CanCancel.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      if (CommissionAndFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CommissionAndFee);
      if (OpenTime != 0UL) hash ^= OpenTime.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Identifier);
      }
      if (Multiplier != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Multiplier);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Action);
      }
      if (Market.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Market);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Currency);
      }
      if (SegType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SegType);
      }
      if (SecType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SecType);
      }
      if (OrderType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OrderType);
      }
      if (IsLong != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsLong);
      }
      if (TotalQuantity != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(TotalQuantity);
      }
      if (TotalQuantityScale != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(TotalQuantityScale);
      }
      if (FilledQuantity != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(FilledQuantity);
      }
      if (FilledQuantityScale != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(FilledQuantityScale);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(AvgFillPrice);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(LimitPrice);
      }
      if (RealizedPnl != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(RealizedPnl);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Status);
      }
      if (ReplaceStatus.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ReplaceStatus);
      }
      if (CancelStatus.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CancelStatus);
      }
      if (OutsideRth != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(OutsideRth);
      }
      if (CanModify != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(CanModify);
      }
      if (CanCancel != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(CanCancel);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Name);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Source);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ErrorMsg);
      }
      if (CommissionAndFee != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(CommissionAndFee);
      }
      if (OpenTime != 0UL) {
        output.WriteRawTag(240, 1);
        output.WriteUInt64(OpenTime);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(248, 1);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Id);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Identifier);
      }
      if (Multiplier != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Multiplier);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Action);
      }
      if (Market.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Market);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Currency);
      }
      if (SegType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SegType);
      }
      if (SecType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SecType);
      }
      if (OrderType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OrderType);
      }
      if (IsLong != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsLong);
      }
      if (TotalQuantity != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(TotalQuantity);
      }
      if (TotalQuantityScale != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(TotalQuantityScale);
      }
      if (FilledQuantity != 0L) {
        output.WriteRawTag(120);
        output.WriteSInt64(FilledQuantity);
      }
      if (FilledQuantityScale != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(FilledQuantityScale);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(AvgFillPrice);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(LimitPrice);
      }
      if (RealizedPnl != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(RealizedPnl);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Status);
      }
      if (ReplaceStatus.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ReplaceStatus);
      }
      if (CancelStatus.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CancelStatus);
      }
      if (OutsideRth != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(OutsideRth);
      }
      if (CanModify != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(CanModify);
      }
      if (CanCancel != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(CanCancel);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Name);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Source);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ErrorMsg);
      }
      if (CommissionAndFee != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(CommissionAndFee);
      }
      if (OpenTime != 0UL) {
        output.WriteRawTag(240, 1);
        output.WriteUInt64(OpenTime);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(248, 1);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Id);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (Multiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (Market.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Market);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (SegType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SegType);
      }
      if (SecType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecType);
      }
      if (OrderType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderType);
      }
      if (IsLong != false) {
        size += 1 + 1;
      }
      if (TotalQuantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalQuantity);
      }
      if (TotalQuantityScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TotalQuantityScale);
      }
      if (FilledQuantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FilledQuantity);
      }
      if (FilledQuantityScale != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(FilledQuantityScale);
      }
      if (AvgFillPrice != 0D) {
        size += 2 + 8;
      }
      if (LimitPrice != 0D) {
        size += 2 + 8;
      }
      if (RealizedPnl != 0D) {
        size += 2 + 8;
      }
      if (Status.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (ReplaceStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReplaceStatus);
      }
      if (CancelStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CancelStatus);
      }
      if (OutsideRth != false) {
        size += 2 + 1;
      }
      if (CanModify != false) {
        size += 2 + 1;
      }
      if (CanCancel != false) {
        size += 2 + 1;
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Source.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (ErrorMsg.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      if (CommissionAndFee != 0F) {
        size += 2 + 4;
      }
      if (OpenTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(OpenTime);
      }
      if (Timestamp != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OrderStatusData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.Multiplier != 0) {
        Multiplier = other.Multiplier;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      if (other.Market.Length != 0) {
        Market = other.Market;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.SegType.Length != 0) {
        SegType = other.SegType;
      }
      if (other.SecType.Length != 0) {
        SecType = other.SecType;
      }
      if (other.OrderType.Length != 0) {
        OrderType = other.OrderType;
      }
      if (other.IsLong != false) {
        IsLong = other.IsLong;
      }
      if (other.TotalQuantity != 0L) {
        TotalQuantity = other.TotalQuantity;
      }
      if (other.TotalQuantityScale != 0) {
        TotalQuantityScale = other.TotalQuantityScale;
      }
      if (other.FilledQuantity != 0L) {
        FilledQuantity = other.FilledQuantity;
      }
      if (other.FilledQuantityScale != 0) {
        FilledQuantityScale = other.FilledQuantityScale;
      }
      if (other.AvgFillPrice != 0D) {
        AvgFillPrice = other.AvgFillPrice;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.RealizedPnl != 0D) {
        RealizedPnl = other.RealizedPnl;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.ReplaceStatus.Length != 0) {
        ReplaceStatus = other.ReplaceStatus;
      }
      if (other.CancelStatus.Length != 0) {
        CancelStatus = other.CancelStatus;
      }
      if (other.OutsideRth != false) {
        OutsideRth = other.OutsideRth;
      }
      if (other.CanModify != false) {
        CanModify = other.CanModify;
      }
      if (other.CanCancel != false) {
        CanCancel = other.CanCancel;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
      if (other.CommissionAndFee != 0F) {
        CommissionAndFee = other.CommissionAndFee;
      }
      if (other.OpenTime != 0UL) {
        OpenTime = other.OpenTime;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Identifier = input.ReadString();
            break;
          }
          case 40: {
            Multiplier = input.ReadUInt32();
            break;
          }
          case 50: {
            Action = input.ReadString();
            break;
          }
          case 58: {
            Market = input.ReadString();
            break;
          }
          case 66: {
            Currency = input.ReadString();
            break;
          }
          case 74: {
            SegType = input.ReadString();
            break;
          }
          case 82: {
            SecType = input.ReadString();
            break;
          }
          case 90: {
            OrderType = input.ReadString();
            break;
          }
          case 96: {
            IsLong = input.ReadBool();
            break;
          }
          case 104: {
            TotalQuantity = input.ReadSInt64();
            break;
          }
          case 112: {
            TotalQuantityScale = input.ReadSInt32();
            break;
          }
          case 120: {
            FilledQuantity = input.ReadSInt64();
            break;
          }
          case 128: {
            FilledQuantityScale = input.ReadSInt32();
            break;
          }
          case 137: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 145: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 153: {
            RealizedPnl = input.ReadDouble();
            break;
          }
          case 162: {
            Status = input.ReadString();
            break;
          }
          case 170: {
            ReplaceStatus = input.ReadString();
            break;
          }
          case 178: {
            CancelStatus = input.ReadString();
            break;
          }
          case 184: {
            OutsideRth = input.ReadBool();
            break;
          }
          case 192: {
            CanModify = input.ReadBool();
            break;
          }
          case 200: {
            CanCancel = input.ReadBool();
            break;
          }
          case 210: {
            Name = input.ReadString();
            break;
          }
          case 218: {
            Source = input.ReadString();
            break;
          }
          case 226: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 237: {
            CommissionAndFee = input.ReadFloat();
            break;
          }
          case 240: {
            OpenTime = input.ReadUInt64();
            break;
          }
          case 248: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadSInt64();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Identifier = input.ReadString();
            break;
          }
          case 40: {
            Multiplier = input.ReadUInt32();
            break;
          }
          case 50: {
            Action = input.ReadString();
            break;
          }
          case 58: {
            Market = input.ReadString();
            break;
          }
          case 66: {
            Currency = input.ReadString();
            break;
          }
          case 74: {
            SegType = input.ReadString();
            break;
          }
          case 82: {
            SecType = input.ReadString();
            break;
          }
          case 90: {
            OrderType = input.ReadString();
            break;
          }
          case 96: {
            IsLong = input.ReadBool();
            break;
          }
          case 104: {
            TotalQuantity = input.ReadSInt64();
            break;
          }
          case 112: {
            TotalQuantityScale = input.ReadSInt32();
            break;
          }
          case 120: {
            FilledQuantity = input.ReadSInt64();
            break;
          }
          case 128: {
            FilledQuantityScale = input.ReadSInt32();
            break;
          }
          case 137: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 145: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 153: {
            RealizedPnl = input.ReadDouble();
            break;
          }
          case 162: {
            Status = input.ReadString();
            break;
          }
          case 170: {
            ReplaceStatus = input.ReadString();
            break;
          }
          case 178: {
            CancelStatus = input.ReadString();
            break;
          }
          case 184: {
            OutsideRth = input.ReadBool();
            break;
          }
          case 192: {
            CanModify = input.ReadBool();
            break;
          }
          case 200: {
            CanCancel = input.ReadBool();
            break;
          }
          case 210: {
            Name = input.ReadString();
            break;
          }
          case 218: {
            Source = input.ReadString();
            break;
          }
          case 226: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 237: {
            CommissionAndFee = input.ReadFloat();
            break;
          }
          case 240: {
            OpenTime = input.ReadUInt64();
            break;
          }
          case 248: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
